$.akottr.dragtable.prototype._restoreState=function(e){for(const[n,t]of Object.entries(e)){var o=this.originalTable.el.find(`th[data-field="${n}"]`);this.originalTable.startIndex=o.prevAll().length+1,this.originalTable.endIndex=parseInt(t,10)+1,this._bubbleCols()}};const filterFn=()=>{Array.prototype.filter||(Array.prototype.filter=function(e){if(this===void 0||this===null)throw new TypeError;const o=Object(this),n=o.length>>>0;if(typeof e!="function")throw new TypeError;const t=[],l=arguments.length>=2?arguments[1]:void 0;for(let s=0;s<n;s++)if(s in o){const i=o[s];e.call(l,i,s,o)&&t.push(i)}return t})};$.extend($.fn.bootstrapTable.defaults,{reorderableColumns:!1,maxMovingRows:10,onReorderColumn(e){return!1},dragaccept:null}),$.extend($.fn.bootstrapTable.Constructor.EVENTS,{"reorder-column.bs.table":"onReorderColumn"}),$.fn.bootstrapTable.methods.push("orderColumns"),$.BootstrapTable=class extends $.BootstrapTable{initHeader(...e){super.initHeader(...e),this.options.reorderableColumns&&this.makeRowsReorderable()}_toggleColumn(...e){super._toggleColumn(...e),this.options.reorderableColumns&&this.makeRowsReorderable()}toggleView(...e){super.toggleView(...e),this.options.reorderableColumns&&(this.options.cardView||this.makeRowsReorderable())}resetView(...e){super.resetView(...e),this.options.reorderableColumns&&this.makeRowsReorderable()}makeRowsReorderable(e=null){try{$(this.$el).dragtable("destroy")}catch{}$(this.$el).dragtable({maxMovingRows:this.options.maxMovingRows,dragaccept:this.options.dragaccept,clickDelay:200,dragHandle:".th-inner",restoreState:e||this.columnsSortOrder,beforeStop:o=>{const n={};o.el.find("th").each((r,d)=>{n[$(d).data("field")]=r}),this.columnsSortOrder=n,this.options.cookie&&this.persistReorderColumnsState(this);const t=[],l=[],s=[];let i=[],a=-1;const u=[];if(this.$header.find("th:not(.detail)").each(function(r){t.push($(this).data("field")),l.push($(this).data("formatter"))}),t.length<this.columns.length){i=this.columns.filter(r=>!r.visible);for(var h=0;h<i.length;h++)t.push(i[h].field),l.push(i[h].formatter)}for(let r=0;r<t.length;r++)a=this.fieldsColumnsIndex[t[r]],a!==-1&&(this.fieldsColumnsIndex[t[r]]=r,this.columns[a].fieldIndex=r,s.push(this.columns[a]));this.columns=s,filterFn(),$.each(this.columns,(r,d)=>{let f=!1;const m=d.field;this.options.columns[0].filter(c=>!f&&c.field===m?(u.push(c),f=!0,!1):!0)}),this.options.columns[0]=u,this.header.fields=t,this.header.formatters=l,this.initHeader(),this.initToolbar(),this.initSearchText(),this.initBody(),this.resetView(),this.trigger("reorder-column",t)}})}orderColumns(e){this.columnsSortOrder=e,this.makeRowsReorderable()}};
