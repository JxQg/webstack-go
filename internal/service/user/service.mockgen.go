// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/user/service.go -destination internal/service/user/service.mockgen.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	v1 "github.com/ch3nnn/webstack-go/api/v1"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockService) Info(ctx *gin.Context, req *v1.InfoReq) (*v1.InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, req)
	ret0, _ := ret[0].(*v1.InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockServiceMockRecorder) Info(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockService)(nil).Info), ctx, req)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, req *v1.LoginReq) (*v1.LoginResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*v1.LoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, req)
}

// UpdatePassword mocks base method.
func (m *MockService) UpdatePassword(ctx *gin.Context, req *v1.UpdatePasswordReq) (*v1.UpdatePasswordResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, req)
	ret0, _ := ret[0].(*v1.UpdatePasswordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockServiceMockRecorder) UpdatePassword(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockService)(nil).UpdatePassword), ctx, req)
}

// i mocks base method.
func (m *MockService) i() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "i")
}

// i indicates an expected call of i.
func (mr *MockServiceMockRecorder) i() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "i", reflect.TypeOf((*MockService)(nil).i))
}
