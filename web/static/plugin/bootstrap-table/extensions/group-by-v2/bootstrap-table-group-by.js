let initBodyCaller;const sprintf=function(e){const o=arguments;let i=!0,r=1;return e=e.replace(/%s/g,()=>{const t=o[r++];return typeof t>"u"?(i=!1,""):t}),i?e:""},groupBy=(e,o)=>{const i={};return e.forEach(r=>{const t=o(r);i[t]=i[t]||[],i[t].push(r)}),i};$.extend($.fn.bootstrapTable.defaults,{groupBy:!1,groupByField:"",groupByFormatter:void 0});const Utils=$.fn.bootstrapTable.utils,BootstrapTable=$.fn.bootstrapTable.Constructor,_initSort=BootstrapTable.prototype.initSort,_initBody=BootstrapTable.prototype.initBody,_updateSelected=BootstrapTable.prototype.updateSelected;BootstrapTable.prototype.initSort=function(...e){_initSort.apply(this,Array.prototype.slice.apply(e));const o=this;if(this.tableGroups=[],this.options.groupBy&&this.options.groupByField!==""){this.options.sortName!==this.options.groupByField&&(this.options.customSort?Utils.calculateObjectValue(this.options,this.options.customSort,[this.options.sortName,this.options.sortOrder,this.data]):this.data.sort((t,s)=>{const n=this.getGroupByFields(),c=[],p=[];return $.each(n,(a,l)=>{c.push(t[l]),p.push(s[l])}),t=c.join(),s=p.join(),t.localeCompare(s,void 0,{numeric:!0})}));const i=groupBy(o.data,t=>{const s=this.getGroupByFields(),n=[];return $.each(s,(c,p)=>{n.push(t[p])}),n.join(", ")});let r=0;$.each(i,(t,s)=>{this.tableGroups.push({id:r,name:t,data:s}),s.forEach(n=>{n._data||(n._data={}),n._data["parent-index"]=r}),r++})}},BootstrapTable.prototype.initBody=function(...e){if(initBodyCaller=!0,_initBody.apply(this,Array.prototype.slice.apply(e)),this.options.groupBy&&this.options.groupByField!==""){const o=this;let i=!1,r=0;this.columns.forEach(t=>{t.checkbox?i=!0:t.visible&&(r+=1)}),this.options.detailView&&!this.options.cardView&&(r+=1),this.tableGroups.forEach(t=>{const s=[];s.push(sprintf('<tr class="info groupBy expanded" data-group-index="%s">',t.id)),o.options.detailView&&!o.options.cardView&&s.push('<td class="detail"></td>'),i&&s.push('<td class="bs-checkbox">','<input name="btSelectGroup" type="checkbox" />',"</td>");let n=t.name;typeof o.options.groupByFormatter=="function"&&(n=o.options.groupByFormatter(t.name,t.id,t.data)),s.push("<td",sprintf(' colspan="%s"',r),">",n,"</td>"),s.push("</tr>"),o.$body.find(`tr[data-parent-index=${t.id}]:first`).before($(s.join("")))}),this.$selectGroup=[],this.$body.find('[name="btSelectGroup"]').each(function(){const t=$(this);o.$selectGroup.push({group:t,item:o.$selectItem.filter(function(){return $(this).closest("tr").data("parent-index")===t.closest("tr").data("group-index")})})}),this.$container.off("click",".groupBy").on("click",".groupBy",function(){$(this).toggleClass("expanded"),o.$body.find(`tr[data-parent-index=${$(this).closest("tr").data("group-index")}]`).toggleClass("hidden")}),this.$container.off("click",'[name="btSelectGroup"]').on("click",'[name="btSelectGroup"]',function(t){t.stopImmediatePropagation();const n=$(this).prop("checked");o[n?"checkGroup":"uncheckGroup"]($(this).closest("tr").data("group-index"))})}initBodyCaller=!1,this.updateSelected()},BootstrapTable.prototype.updateSelected=function(...e){initBodyCaller||(_updateSelected.apply(this,Array.prototype.slice.apply(e)),this.options.groupBy&&this.options.groupByField!==""&&this.$selectGroup.forEach(o=>{const i=o.item.filter(":enabled").length===o.item.filter(":enabled").filter(":checked").length;o.group.prop("checked",i)}))},BootstrapTable.prototype.checkGroup=function(e){this.checkGroup_(e,!0)},BootstrapTable.prototype.uncheckGroup=function(e){this.checkGroup_(e,!1)},BootstrapTable.prototype.checkGroup_=function(e,o){const i=this.getSelections();let r;const t=function(){return $(this).closest("tr").data("parent-index")===e};this.$selectItem.filter(t).prop("checked",o),this.updateRows(),this.updateSelected();const s=this.getSelections();if(o){this.trigger("check-all",s,i);return}this.trigger("uncheck-all",s,i)},BootstrapTable.prototype.getGroupByFields=function(){let e=this.options.groupByField;return $.isArray(this.options.groupByField)||(e=[this.options.groupByField]),e},$.BootstrapTable=class extends $.BootstrapTable{scrollTo(e){if(this.options.groupBy){let o={unit:"px",value:0};if(typeof e=="object"&&(o=Object.assign(o,e)),o.unit==="rows"){let i=0;this.$body.find(`> tr:lt(${o.value})`).each((t,s)=>{i+=$(s).outerHeight(!0)}),this.$body.find(`> tr:not(.groupBy):eq(${o.value})`).prevAll(".groupBy").each((t,s)=>{i+=$(s).outerHeight(!0)}),this.$tableBody.scrollTop(i);return}}super.scrollTo(e)}};
